// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ESTABLISHMENTS
model Establishment {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(100)
  slug        String   @unique @db.VarChar(100)
  accessCode  String?  @map("access_code") @db.VarChar(255)
  hasKitchen  Boolean  @default(true) @map("has_kitchen")
  hasOrders   Boolean  @default(true) @map("has_orders")
  hasReports  Boolean  @default(true) @map("has_reports")
  active      Boolean  @default(true)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  userRoles  UserRole[]
  products   Product[]
  orders     Order[]
  auditLogs  AuditLog[]

  @@index([active])
  @@index([slug])
  @@map("establishments")
}

// USERS
model User {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique @db.VarChar(255)
  name      String   @db.VarChar(100)
  active    Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  userRoles     UserRole[]
  ordersCreated Order[]    @relation("OrderCreator")
  payments      Payment[]  @relation("PaymentReceiver")
  auditLogs     AuditLog[]

  @@index([email])
  @@index([active])
  @@map("users")
}

// USER_ROLES (Multi-tenant)
model UserRole {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @map("user_id") @db.Uuid
  establishmentId String?  @map("establishment_id") @db.Uuid
  role            Role
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  establishment Establishment? @relation(fields: [establishmentId], references: [id], onDelete: Cascade)

  @@unique([userId, establishmentId, role])
  @@index([userId])
  @@index([establishmentId])
  @@map("user_roles")
}

enum Role {
  admin_global
  owner
  waiter
  kitchen
  cashier
}

// PRODUCTS
model Product {
  id              String   @id @default(uuid()) @db.Uuid
  establishmentId String   @map("establishment_id") @db.Uuid
  name            String   @db.VarChar(100)
  price           Decimal  @db.Decimal(10, 2)
  active          Boolean  @default(true)
  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  establishment Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  orderItems    OrderItem[]

  @@index([establishmentId])
  @@index([establishmentId, active])
  @@map("products")
}

// ORDERS
model Order {
  id              String        @id @default(uuid()) @db.Uuid
  establishmentId String        @map("establishment_id") @db.Uuid
  code            String?       @db.VarChar(50)
  status          OrderStatus   @default(open)
  paymentStatus   PaymentStatus @default(unpaid) @map("payment_status")
  totalAmount     Decimal       @default(0) @map("total_amount") @db.Decimal(10, 2)
  paidAmount      Decimal       @default(0) @map("paid_amount") @db.Decimal(10, 2)
  createdBy       String?       @map("created_by") @db.Uuid
  createdAt       DateTime      @default(now()) @map("created_at") @db.Timestamp(6)
  closedAt        DateTime?     @map("closed_at") @db.Timestamp(6)
  updatedAt       DateTime      @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  establishment  Establishment   @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  creator        User?           @relation("OrderCreator", fields: [createdBy], references: [id])
  items          OrderItem[]
  payments       Payment[]
  kitchenTickets KitchenTicket[]

  @@index([establishmentId])
  @@index([establishmentId, status])
  @@index([establishmentId, paymentStatus])
  @@index([establishmentId, createdAt(sort: Desc)])
  @@map("orders")
}

enum OrderStatus {
  open
  closed
  canceled
}

enum PaymentStatus {
  paid
  unpaid
  partial
}

// ORDER_ITEMS
model OrderItem {
  id          String   @id @default(uuid()) @db.Uuid
  orderId     String   @map("order_id") @db.Uuid
  productId   String?  @map("product_id") @db.Uuid
  productName String   @map("product_name") @db.VarChar(100)
  qty         Int
  unitPrice   Decimal  @map("unit_price") @db.Decimal(10, 2)
  note        String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  order   Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id], onDelete: SetNull)

  @@index([orderId])
  @@map("order_items")
}

// KITCHEN_TICKETS
model KitchenTicket {
  id           String              @id @default(uuid()) @db.Uuid
  orderId      String              @map("order_id") @db.Uuid
  ticketNumber Int                 @default(autoincrement()) @map("ticket_number")
  status       KitchenTicketStatus @default(queue)
  createdAt    DateTime            @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt    DateTime            @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([status, createdAt(sort: Asc)])
  @@map("kitchen_tickets")
}

enum KitchenTicketStatus {
  queue
  preparing
  ready
  delivered
}

// PAYMENTS
model Payment {
  id         String        @id @default(uuid()) @db.Uuid
  orderId    String        @map("order_id") @db.Uuid
  method     PaymentMethod
  amount     Decimal       @db.Decimal(10, 2)
  receivedBy String?       @map("received_by") @db.Uuid
  receivedAt DateTime      @default(now()) @map("received_at") @db.Timestamp(6)

  // Relations
  order    Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  receiver User?  @relation("PaymentReceiver", fields: [receivedBy], references: [id])

  @@index([orderId])
  @@index([receivedAt(sort: Desc)])
  @@map("payments")
}

enum PaymentMethod {
  cash
  card
  pix
}

// AUDIT_LOGS
model AuditLog {
  id              String    @id @default(uuid()) @db.Uuid
  establishmentId String?   @map("establishment_id") @db.Uuid
  userId          String?   @map("user_id") @db.Uuid
  action          String    @db.VarChar(50)
  entity          String    @db.VarChar(50)
  entityId        String?   @map("entity_id") @db.Uuid
  payload         Json?     @db.JsonB
  createdAt       DateTime  @default(now()) @map("created_at") @db.Timestamp(6)

  // Relations
  establishment Establishment? @relation(fields: [establishmentId], references: [id], onDelete: SetNull)
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([establishmentId, createdAt(sort: Desc)])
  @@index([entity, entityId])
  @@map("audit_logs")
}
